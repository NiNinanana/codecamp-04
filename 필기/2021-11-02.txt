배열 []
.length : 배열의 길이
배열 안 데이터들은 index번호를 가지며 0번째 부터 시작
let aaa = [1, "사과", "바나나", 5]
aaa[3] = 5

데이터 추가
    push : 배열 맨 뒤에 데이터 추가 array.push()
    unshift : 배열 맨 앞에 데이터 추가 array.unshift()

데이터 삭제
    pop : 배열 맨 뒤의 데이터 삭제
    shift : 배열 맨 앞의 데이터 삭제

데이터 조회
    indexOf : 데이터의 index 값 반환 array.indexOf() / 배열안에 없는 데이터면 -1 반환
    includes : 데이터의 존재 여부 반환(boolean) array.includes()

객체{} : 데이터들을 종류에 맞춰 저장
key값, value값

const Obj = {
    "name" : "철수",
    "age" : 12,
    "school" : {
        "name" : 다람쥐 초등학교"
    }
}
Obj.name // "철수"
Obj.school // {"name" : "다람쥐 초등학교"}
Obj.school.name // "다람쥐 초등학교"

데이터 추가
    obj.key값=value값 / 이미 그 key값이 있다면 value값을 변경한다
    obj.key값.key값=value값

데이터 삭제
    delete obj.key값


-----

커리큘럼
왜 react -> 컴포넌트 -> state

git에서 코드 가져오기
    git에서 code에서 https복사
    git clone https주소

가져오면 node_modules가 없음
git에 node_modules를 빼고 올렸기 때문
.gitignore에 무시하고 올릴 것들이 있음
언제든 재설치할 수 있고 용량도 크기에 굳이 안올리는 것

package.json에 dependecies에 필요한 목록들이 있음
package.json의 상위폴더에서 yarn install하면 모두 설치가 된다.(ls했을 때 package.json이 있어야됨)

.gitignore의 node_modules를 주석처리 해줘야 node_modules폴더의 색깔이 흰색으로 돌아온다.
그러면 굉장히 느려지게 되는데 그만큼 용량이 크다는 것이다. 그렇기에 회색으로 두자

yarn dev -p 3001 : 3001번으로 실행되는 것

라이브러리 : 기능
프레임워크 : 수많은 라이브러리를 모아놓음

react : 라이브러리
angular : 프레임워크

3대 프레임워크
vue, react, angular

npm trends에서 트렌드 확인 가능
리액트가 압도적

말일에는 개발을 안하는 문화가 있어서 쑥 빠지는 경향이 있음

react.js 웹
react-native 앱(react랑 60~80%일치) / 크로스플랫폼
react + electron pc앱

componenet : react의 핵심
    ui 또는 기능을 '부품화'해서 재사용 가능하게 하는 것
    하나 만들어서 여러군데 적용
    만들어서 끌어다 쓰는 것/복사해서 붙여넣는 것이 아님
    물론 데이터는 원하는 데로 변경 가능

function을 통해서 컴포넌트 만듦

componenet 만드는 방법
    1. 클래스형
    2. 함수형
        function/화살표 함수로도 가능

react-hooks : react에서 제공하는 기능 / 함수형을 클래스형과 동일한 기능을 사용가능하도록

state : componenet의 변수 / return 윗 부분

const [변수이름, 변수를 바꾸는 기능] = useState(초기값)
useStates는 import{useState} from "react"

let age = 8
age = 13

const [age, setAge] = useState(8) ======= let age = 8
setAge(13) ======= age = 13

자바스크립트를 가져올 땐 {}
강제로 쓰는 것들은 ""
















